generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean      @default(false)
  categoryId  String?      @db.Uuid
  category    Category?    @relation(fields: [categoryId], references: [id])
  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]
  createdAt   DateTime     @default(dbgenerated("now()"))
  updatedAt   DateTime     @default(dbgenerated("now()")) @updatedAt
}

model Category {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String   @unique
  courses Course[]
}

model Attachment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  url       String
  courseId  String   @db.Uuid
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(dbgenerated("now()"))
  updatedAt DateTime @default(dbgenerated("now()")) @updatedAt
}

model Chapter {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String
  description  String?
  videoUrl     String?
  position     Int
  isPublished  Boolean        @default(false)
  isFree       Boolean        @default(false)
  muxData      MuxData?
  courseId     String         @db.Uuid
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]
  createdAt    DateTime       @default(dbgenerated("now()"))
  updatedAt    DateTime       @default(dbgenerated("now()")) @updatedAt
}

model MuxData {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assetId    String
  playbackId String?
  chapterId  String  @unique @db.Uuid
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String
  chapterId   String   @db.Uuid
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(dbgenerated("now()"))
  updatedAt   DateTime @default(dbgenerated("now()")) @updatedAt

  @@unique([userId, chapterId])
}

model Purchase {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String
  courseId  String   @db.Uuid
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(dbgenerated("now()"))
  updatedAt DateTime @default(dbgenerated("now()")) @updatedAt

  @@unique([userId, courseId])
}

model StripeCustomer {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String   @unique
  stripeCustomerId String   @unique @db.Uuid
  createdAt        DateTime @default(dbgenerated("now()"))
  updatedAt        DateTime @default(dbgenerated("now()")) @updatedAt
}

// model Test {
//   id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   userId String  @db.Uuid
//   email  String? @unique
//   name   String  @default("")
//   age    Int?
//   price  Float

//   emailVerified DateTime?
//   updatedAt     DateTime  @default(dbgenerated("now()")) @updatedAt
//   joinedAt      DateTime  @default(dbgenerated("now()"))

//   User User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
